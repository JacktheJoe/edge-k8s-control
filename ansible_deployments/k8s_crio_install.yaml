--- 

# prepare kubernetes environment with cri-o, with checkpoint and restore enabled

- name: Cluster-node preparation
  hosts: kubernetes
  become_user: root
  become: yes
  # serial: 1
  gather_facts: yes

  tags:
    - p1

  tasks:
    - name: Update time on nodes
      ansible.builtin.shell: | 
        date -s "$(wget -qSO- --max-redirect=0 google.com 2>&1 | grep Date: | cut -d' ' -f5-8)Z"

    - name: Disable Ubuntu unattended updates
      ansible.builtin.replace:
        path: /etc/apt/apt.conf.d/20auto-upgrades
        regexp: '1'
        replace: '0'

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Upgrade all packages to the latest version
      ansible.builtin.apt:
        upgrade: dist
        force_apt_get: yes

    # no need, might as well nuke it then
    - name: Purge snapd package
      ansible.builtin.apt:
        name: snapd
        state: absent
        purge: yes

    # adding some sleep time between each hosts
    - wait_for:
        timeout: "{{ sleep_in_between|default(20) }}"

    - name: install qemu-guest-agent and upgrade the kernel to hwe
      ansible.builtin.apt:
        name:
          - qemu-guest-agent
          - linux-generic-hwe-20.04
          - iperf
        state: present
    
    # adding some sleep time between each hosts
    - wait_for:
        timeout: "{{ sleep_in_between|default(10) }}"

    - name: update date into 24-hr
      ansible.builtin.lineinfile:
        path: /etc/default/locale
        line: "{{ item }}"
        create: no
      loop:
        - "LC_ALL="
        - "LC_TIME=C.UTF-8"
  
    - name: temporarily disable swap filw
      ansible.builtin.shell: |
        swapoff -a

    - name: Remove swap entry from /etc/fstab
      ansible.builtin.lineinfile:
        path: /etc/fstab
        regexp: '^.*swap.*$'
        state: absent

    - name: Ensure overlay and br_netfilter modules are loaded on boot
      ansible.builtin.blockinfile:
        path: /etc/modules-load.d/crio.conf
        block: |
          overlay
          br_netfilter
        create: yes

    - name: Load overlay module
      ansible.builtin.modprobe:
        name: overlay
        state: present

    - name: Load br_netfilter module
      ansible.builtin.modprobe:
        name: br_netfilter
        state: present

    - name: Set sysctl settings for Kubernetes
      ansible.builtin.blockinfile:
        path: /etc/sysctl.d/kubernetes.conf
        block: |
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables  = 1
          net.ipv4.ip_forward                 = 1
        create: yes

    - name: Reload sysctl
      ansible.builtin.command:
        cmd: sysctl --system

    - name: Enable UFW
      ansible.builtin.command:
        cmd: ufw --force enable
    
    - name: Allow ssh
      ansible.builtin.shell: | 
        ufw allow 22

    - name: Allow metric-server
      ansible.builtin.shell: | 
        ufw allow 4443

    - name: Reboot the system
      ansible.builtin.reboot:
        test_command: ip a

- name: control_plane firewall
  hosts: masters
  become_user: root
  become: yes
  # serial: 1
  gather_facts: no

  tags:
    - p2

  tasks:

    - name: Open ports for Kubernetes Control Plane
      ansible.builtin.ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop:
        - 6443   # Kubernetes API server
        - 2379:2380  # etcd server client API
        - 10250  # Kubelet API
        - 10259  # kube-scheduler
        - 10257  # kube-controller-manager

    - name: Open ports for Calico CNI
      ansible.builtin.ufw:
        rule: allow
        port: "{{ item.port }}"
        proto: "{{ item.proto }}"
      loop:
        - { port: 179, proto: tcp }    # BGP
        - { port: 4789, proto: udp }   # VXLAN
        - { port: 4789, proto: tcp }   # VXLAN (TCP might not be needed for all setups but included for completeness)
        - { port: 2379, proto: tcp }   # etcd server client API (already opened above, included for completeness)

    - name: Check UFW status
      ansible.builtin.command: ufw status
      register: ufw_status  # Save command output to a variable

    - name: Show UFW status output
      ansible.builtin.debug:
        msg: "{{ ufw_status.stdout_lines }}"

- name: worker firewall
  hosts: workers
  become_user: root
  become: yes
  # serial: 1
  gather_facts: no 

  tags:
    - p2

  tasks:

    - name: Open ports for Kubernetes Worker Nodes
      ansible.builtin.ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop:
        - 10250   # Kubelet API
        - 30000:32767  # NodePort Services range
        - 22 # SSH, for remote testing

    - name: Open ports for Calico CNI
      ansible.builtin.ufw:
        rule: allow
        port: "{{ item.port }}"
        proto: "{{ item.proto }}"
      loop:
        - { port: 179, proto: tcp }    # BGP
        - { port: 4789, proto: udp }   # VXLAN
        - { port: 4789, proto: tcp }   # VXLAN (TCP might not be necessary but included for completeness)
        - { port: 2379, proto: tcp }   # etcd server client API

    - name: Check UFW status
      ansible.builtin.command: ufw status verbose
      register: ufw_status

    - name: Show UFW status output
      ansible.builtin.debug:
        msg: "{{ ufw_status.stdout_lines }}"

- name: install cri-o runtime
  hosts: kubernetes
  become_user: root
  become: yes
  # serial: 1
  gather_facts: no

  tags:
    - p2

  vars:
    OS: xUbuntu_20.04
    # CRIO_VERSION_prefix: 1.28
    # CRIO_VERSION: 1.28.2
    CRIO_VERSION: 1.28

  tasks:
#
    #- name: Add the libcontainers stable repository
    #  ansible.builtin.apt_repository:
    #    repo: "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/{{ OS }}/ /"
    #    state: present
    #    filename: devel:kubic:libcontainers:stable
#
    #- name: Add the CRI-O repository for a specific version
    #  ansible.builtin.apt_repository:
    #    repo: "deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/{{ CRIO_VERSION_prefix }}:/{{ CRIO_VERSION }}/{{ OS }}/ /"
    #    state: present
    #    filename: "devel:kubic:libcontainers:stable:cri-o:{{ CRIO_VERSION }}"
    #
    #- name: Add GPG key for libcontainers stable
    #  ansible.builtin.apt_key:
    #    url: "https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/{{ OS }}/Release.key"
    #    keyring: /etc/apt/trusted.gpg.d/libcontainers.gpg
    #    state: present
#
    #- name: Add GPG key for CRI-O
    #  ansible.builtin.apt_key:
    #    url: "https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:{{ CRIO_VERSION_prefix }}{{ CRIO_VERSION }}/{{ OS }}/Release.key"
    #    keyring: /etc/apt/trusted.gpg.d/libcontainers.gpg
    #    state: present
#
    - name: add cri-o repo
      shell: | 
        echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/{{ OS }}/ /"|sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
        echo "deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/{{ CRIO_VERSION }}/{{ OS }}/ /"|sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable:cri-o:{{ CRIO_VERSION }}.list

    - name: add GPG key for cri-o repo
      shell: | 
        curl -L https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:{{ CRIO_VERSION }}/{{ OS }}/Release.key | sudo apt-key --keyring /etc/apt/trusted.gpg.d/libcontainers.gpg add -
        curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/{{ OS }}/Release.key | sudo apt-key --keyring /etc/apt/trusted.gpg.d/libcontainers.gpg add -

    - name: Update APT package cache
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install CRI-O and related packages
      ansible.builtin.apt:
        name:
          - cri-o
          - cri-o-runc
          - cri-tools
        state: present
        install_recommends: no
        update_cache: yes
    
    - name: Reload systemd manager configuration
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: Enable and start the CRI-O service
      ansible.builtin.systemd:
        name: crio
        enabled: yes
        state: started
    
- name: install k8s modules
  hosts: kubernetes
  become_user: root
  become: yes
  # serial: 1
  gather_facts: no

  tags:
    - p2

  vars:
    kubernetes_version: 1.28
    kube_version: 1.28.0-1.1

  tasks: 
    # - name: Add the GPG key for the Kubernetes repository
    #   ansible.builtin.apt_key:
    #     url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    #     state: present
# 
    # - name: Add the Kubernetes apt repository
    #   ansible.builtin.apt_repository:
    #     repo: "deb http://apt.kubernetes.io/ kubernetes-xenial main"
    #     state: present

    # old google repo deprecated 

    - name: Ensure necessary packages are installed
      ansible.builtin.apt:
        state: present
        update_cache: yes
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gpg

    - name: Ensure the /etc/apt/keyrings directory exists
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Download and dearmor the Kubernetes signing key
      ansible.builtin.shell: |
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version }}/deb/Release.key | gpg --dearmor --yes -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      args:
        executable: /bin/bash
      register: gpg_command
      failed_when: gpg_command.rc != 0 and "no valid OpenPGP data found" not in gpg_command.stderr

    - name: Add Kubernetes apt repository
      ansible.builtin.lineinfile:
        path: /etc/apt/sources.list.d/kubernetes.list
        line: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version }}/deb/ /"
        create: yes

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes

    - name: Install Kubernetes components
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
        allow_downgrade: yes
      loop:
        - kubeadm={{ kube_version }}
        - kubelet={{ kube_version }}
        - kubectl={{ kube_version }}

    
    # adding some sleep time between each hosts
    - wait_for:
        timeout: "{{ sleep_in_between|default(20) }}"

- name: init cluster
  hosts: masters
  become_user: root
  become: yes
  # serial: 1
  gather_facts: no

  tags:
    - p3

  vars: 
    pod_network: 192.168.0.0/16
    calico_version: 3.27.2
  
  tasks: 
    - name: Enable the Kubelet service
      ansible.builtin.systemd:
        name: kubelet
        enabled: yes
        state: started

    - name: Pull images required by Kubeadm
      ansible.builtin.command:
        cmd: kubeadm config images pull
      changed_when: False

    - name: init cluster
      ansible.builtin.shell: | 
        kubeadm init --pod-network-cidr={{ pod_network }} --cri-socket unix:///var/run/crio/crio.sock
      register: init_output

    - name: Show init_output
      ansible.builtin.debug:
        msg: "{{ init_output.stdout_lines }}"

    - name: export conf
      ansible.builtin.shell: | 
        export KUBECONFIG=/etc/kubernetes/admin.conf
        mkdir -p $HOME/.kube
        cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
        chown $(id -u):$(id -g) $HOME/.kube/config  

    - name: deploy calico
      ansible.builtin.shell: | 
        kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v{{ calico_version }}/manifests/calico.yaml
      register: calico_output

    - name: Show calico_output
      ansible.builtin.debug:
        msg: "{{ calico_output.stdout_lines }}"

    - name: Generate join command
      ansible.builtin.shell: kubeadm token create --print-join-command
      register: join_command

    - name: Copy join command to local file for cluster1_master
      local_action:
        module: copy
        content: "{{ join_command.stdout }}"
        dest: "/tmp/kubernetes_join_command_cluster1"
      when: inventory_hostname in groups['cluster1_master']

    - name: Copy join command to local file for cluster2_master
      local_action:
        module: copy
        content: "{{ join_command.stdout }}"
        dest: "/tmp/kubernetes_join_command_cluster2"
      when: inventory_hostname in groups['cluster2_master']

    - name: Copy join command to local file for cluster3_master
      local_action:
        module: copy
        content: "{{ join_command.stdout }}"
        dest: "/tmp/kubernetes_join_command_cluster3"
      when: inventory_hostname in groups['cluster3_master']

    - name: Copy join command to local file for cluster4_master
      local_action:
        module: copy
        content: "{{ join_command.stdout }}"
        dest: "/tmp/kubernetes_join_command_cluster4"
      when: inventory_hostname in groups['cluster4_master']

    - name: Copy join command to local file for cluster5_master
      local_action:
        module: copy
        content: "{{ join_command.stdout }}"
        dest: "/tmp/kubernetes_join_command_cluster5"
      when: inventory_hostname in groups['cluster5_master']

- name: Join worker nodes
  hosts: workers
  become_user: root  
  become: yes
  # serial: 1
  gather_facts: no

  tags:
    - p3

  tasks:

    - name: Copy join command to workers of cluster1
      copy:
        src: "/tmp/kubernetes_join_command_cluster1"
        dest: "/tmp/kubernetes_join_command"
        mode: '0777'
      when: inventory_hostname in groups['cluster1_worker']

    - name: Copy join command to workers of cluster2
      copy:
        src: "/tmp/kubernetes_join_command_cluster2"
        dest: "/tmp/kubernetes_join_command"
        mode: '0777'
      when: inventory_hostname in groups['cluster2_worker']

    - name: Copy join command to workers of cluster3
      copy:
        src: "/tmp/kubernetes_join_command_cluster3"
        dest: "/tmp/kubernetes_join_command"
        mode: '0777'
      when: inventory_hostname in groups['cluster3_worker']

    - name: Copy join command to workers of cluster4
      copy:
        src: "/tmp/kubernetes_join_command_cluster4"
        dest: "/tmp/kubernetes_join_command"
        mode: '0777'
      when: inventory_hostname in groups['cluster4_worker']

    - name: Copy join command to workers of cluster5
      copy:
        src: "/tmp/kubernetes_join_command_cluster5"
        dest: "/tmp/kubernetes_join_command"
        mode: '0777'
      when: inventory_hostname in groups['cluster5_worker']

    - name: Execute the join command on worker nodes
      ansible.builtin.shell: sh /tmp/kubernetes_join_command
      when: inventory_hostname in groups['cluster1_worker'] or inventory_hostname in groups['cluster2_worker'] or inventory_hostname in groups['cluster3_worker'] or inventory_hostname in groups['cluster4_worker'] or inventory_hostname in groups['cluster5_worker']

- name: enable criu for crio 
  hosts: kubernetes
  become_user: root
  become: yes
  # serial: 1
  gather_facts: no

  tags:
    - p4

  tasks:

    - name: enable criu for crio 
      ansible.builtin.replace:
        path: /etc/crio/crio.conf
        regexp: '^# enable_criu_support = false'
        replace: 'enable_criu_support = true'

    - name: Change drop_infra_ctr setting in CRIO configuration
      ansible.builtin.replace:
        path: /etc/crio/crio.conf
        regexp: '^# drop_infra_ctr = true'
        replace: 'drop_infra_ctr = false'

    - name: Install CRIU
      ansible.builtin.apt:
        name: criu
        state: present
    
    # adding some sleep time between each hosts
    - wait_for:
        timeout: "{{ sleep_in_between|default(5) }}"

    - name: Restart CRIO service
      ansible.builtin.systemd:
        name: crio
        state: restarted
        daemon_reload: yes
    
    - name: Get recent CRIO service logs
      ansible.builtin.command:
        cmd: "journalctl -u crio --no-pager --lines=100"
      register: crio_logs

    - name: Display CRIO logs
      ansible.builtin.debug:
        msg: "{{ crio_logs.stdout }}"

- name: enable container checkpoing gate
  hosts: masters
  become_user: root
  become: yes
  # serial: 1
  gather_facts: no 

  tags:
    - p4

  tasks: 

    - name: change config for apiserver
      ansible.builtin.replace:
        path: /etc/kubernetes/manifests/kube-apiserver.yaml
        regexp: '(\s+- kube-apiserver\n)'
        replace: '\1    - --feature-gates=ContainerCheckpoint=true\n'

    - name: change config for controller-manager
      ansible.builtin.replace:
        path: /etc/kubernetes/manifests/kube-controller-manager.yaml
        regexp: '(\s+- kube-controller-manager\n)'
        replace: '\1    - --feature-gates=ContainerCheckpoint=true\n'

    - name: change config for scheduler
      ansible.builtin.replace:
        path: /etc/kubernetes/manifests/kube-scheduler.yaml
        regexp: '(\s+- kube-scheduler\n)'
        replace: '\1    - --feature-gates=ContainerCheckpoint=true\n'

- name: enable container checkpoint for kubelet
  hosts: kubernetes
  become_user: root
  become: yes
  # serial: 1
  gather_facts: no

  tags:
    - p4

  tasks:

    - name: Ensure checkpoint enabled for kubelet
      ansible.builtin.blockinfile:
        path: /var/lib/kubelet/config.yaml
        block: |
          featureGates:
            ContainerCheckpoint: true
        marker: "# {mark} ANSIBLE MANAGED BLOCK"
        insertafter: EOF

    - name: Reboot the system
      ansible.builtin.reboot:
        test_command: ip a

- name: Metrics server deployment
  hosts: masters
  become: yes
  # serial: 1
  gather_facts: no

  tags:
    - p5

  tasks:
    - name: Copy metrics server deployment
      become: yes
      ansible.builtin.copy:
        src: ../k8s_deployments/metrics_deployment.yaml
        dest: ./metrics_deployment.yaml
        mode: 0777

    - name: Run metrics server deployment
      become: yes
      ansible.builtin.shell:
        cmd: kubectl apply -f metrics_deployment.yaml

    - name: test metric server
      become: yes
      ansible.builtin.shell: |
        kubectl top nodes | grep master
      register: kubectl

    - ansible.builtin.debug:
        msg: "{{ kubectl.stdout_lines }}"