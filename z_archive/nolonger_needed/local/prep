---

- name: install environment
  hosts: test
  become: yes
  vars:
    - download_dest: /home/jack
      # vars for containerd-related installations
    - containerd_version: 1.6.24
    - runc_version: 1.1.9
    - cni_version: 1.3.0
      # also can verify downloaded file in the future if needed, via digital signatures, for now only test on basic sha256
    - containerd_sha256: a56fac5ba03c3d6f74ceae14abdc9fafabcba900105e9890c0ac895cc00164ad
    - cni_sha256: 754a71ed60a4bd08726c3af705a7d55ee3df03122b12e389fdba4bea35d7dd7e

  tasks:
    # install the basic components, containerd, runc, and cni-plugin
    - name: download containerd
      ansible.builtin.get_url:
        url: https://github.com/containerd/containerd/releases/download/v{{ containerd_version }}/containerd-{{ containerd_version }}-linux-amd64.tar.gz
        dest: "{{ download_dest }}"
        checksum: sha256:"{{ containerd_sha256 }}"
    - name: download runc
      ansible.builtin.get_url:
        url: https://github.com/opencontainers/runc/releases/download/v{{ runc_version }}/runc.amd64
        dest: "{{ download_dest }}"
    # checksum: asc: 
    - name: download cni plugin
      ansible.builtin.get_url:
        url: https://github.com/containernetworking/plugins/releases/download/v{{ cni_version }}/cni-plugins-linux-amd64-v{{ cni_version }}.tgz
        dest: "{{ download_dest }}"
        checksum: sha256:"{{ cni_sha256 }}"
    - name: install containerd
      ansible.builtin.shell: |
        sudo chmod +x containerd-{{ containerd_version }}-linux-amd64.tar.gz
        sudo tar Cxzvf /usr/local containerd-{{ containerd_version }}-linux-amd64.tar.gz
    - name: install runc
      ansible.builtin.shell: |
        sudo chmod +x runc.amd64
        install -m 755 runc.amd64 /usr/local/sbin/runc-version
    - name: install cni
      ansible.builtin.shell: |
        sudo chmod +x cni-plugins-linux-amd64-v{{ cni_version }}.tgz
        mkdir -p /opt/cni/bin
        sudo tar Cxzvf /opt/cni/bin cni-plugins-linux-amd64-v{{ cni_version }}.tgz
    - block:
        - shell: |
            [ ! -e containerd-{{ containerd_version }}-linux-amd64.tar.gz ] || rm containerd-{{ containerd_version }}-linux-amd64.tar.gz
            [ ! -e runc.amd64 ] || rm runc.amd64
            [ ! -e cni-plugins-linux-amd64-v{{ cni_version }}.tgz ] || rm cni-plugins-linux-amd64-v{{ cni_version }}.tgz
      rescue:
        - debug:
            msg: 'Cannot seem to delete the files!! '
      always:
        - debug:
            msg: 'Seems like everything went through. '
    # updates and insatlls packages
    - name: update
      ansible.builtin.apt:
        update_cache: yes
        name: "*"
    - name: install packages
      ansible.builtin.apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - python3-pip
    # configure containerd in systemdCGroup
    - name: configure containerd service
      ansible.builtin.shell: |
        sudo mkdir /etc/containerd
        containerd config default | sudo tee /etc/containerd/config.toml
        sudo sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml
        sudo curl -L https://raw.githubusercontent.com/containerd/containerd/main/containerd.service -o /etc/systemd/system/containerd.service
        sudo systemctl daemon-reload
        sudo systemctl enable --now containerd
    - name: check systemctl output
      ansible.builtin.shell: 'sudo systemctl status containerd'
      register: command_output
    - debug:
        var: command_output.stdout_lines
    # forward ipv4
    - name: forward v4 traffic
      ansible.builtin.shell: |
        cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
        overlay
        br_netfilter
        EOF
        sudo modprobe -a overlay br_netfilter
        cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
        net.bridge.bridge-nf-call-iptables  = 1
        net.bridge.bridge-nf-call-ip6tables = 1
        net.ipv4.ip_forward                 = 1
        EOF
        sudo sysctl --system
    # add gpg key and kube repo
    - name: add kubernetes gpg key
      ansible.builtin.get_url:
        url: https://dl.k8s.io/apt/doc/apt-key.gpg
        dest: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    - name: add kubernetes repo
      ansible.builtin.apt_repository:
        filename: /etc/apt/sources.list.d/kubernetes.list
        repo: 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main'
    # download kubeadm, kubectl, and kubelet
    - name: update && upgrade
      ansible.builtin.apt:
        update_cache: yes
        name: "*"
        state: latest
        autoclean: yes
    - name: download kubeadm
      ansible.builtin.apt:
        pkg:
          - kubelet
          - kubeadm
          - kubectl
    # hold updates for kubelet, kubeadm, and kubectl (only manual)
    - name: hold auto updates for kubeadm
      ansible.builtin.dpkg_selections:
        name: kubeadm
        selection: hold
    - name: hold auto updates for kubelet
      ansible.builtin.dpkg_selections:
        name: kubelet
        selection: hold
    - name: hold auto updates for kubectl
      ansible.builtin.dpkg_selections:
        name: kubectl
        selection: hold
    # Disable swap
    - name: Disable swap for current session
      command: swapoff -a
      become: true
    - name: Disable swap permanently, persist reboots
      replace:
        path: /etc/fstab
        regexp: '^(\s*)([^#\n]+\s+)(\w+\s+)swap(\s+.*)$'
        replace: '#\1\2\3swap\4'
        backup: yes
