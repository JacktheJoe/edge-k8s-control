---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: k8s-monitoring-expose
  namespace: kube-system

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: k8s-monitoring-expose
rules:
# allow the service account to do what-ever
- apiGroups: ["*"]
  resources: ["pods", "nodes", "svc", "deployments"]
  verbs: ["get", "watch", "list"]

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: k8s-monitoring-expose
subjects:
- kind: ServiceAccount
  name: k8s-monitoring-expose
  namespace: kube-system
roleRef:
  kind: ClusterRole
  name: k8s-monitoring-expose
  apiGroup: rbac.authorization.k8s.io

---
kind: Service
apiVersion: v1
metadata:
  name: k8s-monitoring-expose-service
  labels:
    app: k8s-monitoring-expose
spec:
  selector:
    app: k8s-monitoring-expose
  type: NodePort
  ports:
    # no need to use specified ports for updating the data server
    # http1 to receive peer updates
    # http2 to receive decision, such as "migration"
    # iperf to receive traffic from other clusters
    - name: iperf
      protocol: TCP
      port: 5201
      targetPort: 5201
      nodePort: 30001
    - name: http1
      protocol: TCP
      port: 8080
      targetPort: 8080
      nodePort: 30002
    - name: http2
      protocol: TCP
      port: 8081
      targetPort: 8081
      nodePort: 30003

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: k8s-monitoring-expose-deployment
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: k8s-monitoring-expose
  template:
    metadata:
      labels:
        app: k8s-monitoring-expose
    spec:
      serviceAccountName: k8s-monitoring-expose
      containers:
        - name: k8s-monitoring-expose
          image: xz446/k8s-monitoring-expose:0.0.18
          # always-fresh
          imagePullPolicy: Always
          ports:
            # http1 to receive peer updates
            - containerPort: 8080
            # http2 to receive decision, such as "migration"
            - containerPort: 8081
            # iperf to receive traffic from other clusters
            - containerPort: 5201
          env: 
          - name: NODE_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP